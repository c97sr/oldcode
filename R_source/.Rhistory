# To dos#
# - next: put the age specific  #
rm(list=ls(all=TRUE))#
options(error=NULL)#
#
require("odesolve")#
require("date")#
source("../H1N1pdm/swine_flu_funcs.R")#
#
# Runs for the baseline figure#
#
popsize <- 7000000		# new york from http://www.census.gov/popest/cities/tables/SUB-EST2007-01.csv#
#
# Next check that the revised force of infection doesn't make much difference#
stn 	<- modelSIR_new(pname=c("r","N","seed"),pvals=c(-0.00001,1e9,3),#
		casemix=c(1492,724,71),vp=usParams(),NGM=makeNGM_new)#
#
plot(stn[,"dS"],ylim=c(0.9,1.1),type="l")#
#
max(stn[,"Iv"]) # 0.02419522#
#
sol_low_Tg 	<- modelSIR(			pname=c("r","p_H","p_R","Tg","N"),#
		pvals=c(0.26,0.031,0.86,1.8,popsize))
trimSpace
require(seqinr)
trimSpace
#This program simulates the following:#
#Setting the basic reproductive number, this program simulates the consequent infection of other people in the population#
#A stacked bar plot is plotted to show the total number of cases, including index case and generations of infected cases#
#
rm(list=ls(all=TRUE))#
options(error=NULL)#
#
##
#Getting parameters#
##
print('Planting a single seed...')#
n <- 1#
print('Enter basic reproductive number, R0:')               #input the basic reproductive number#
R0 <- scan(nmax=1)#
if (R0 < 1) {stop("Warning: Enter a reproductive number that is greater than or equal to 1")}#
print('How many days does the outbreak last?')              #input the duration of outbreak#
duration <- scan(nmax=1)#
#
#
#Initalize variables#
seed.num <- array(0, c(1,duration))                         #array for number of seeds#
case.num <- array(0, c(1,duration))                         #array for number of cases in one generation of infection#
case.day <- array(0, c(1,R0))                               #array for generation time in one generation of infection#
day.diff <- array(0, c(1,R0))                               #array for difference in days in generation time#
#
    #
#
##Main program#
#Plant index case (g=1)#
seed.num[1] <- 1                                            #seed size = 1#
seed.day <- 0                                               #plant seed on t=0#
#
#Start to infect cases#
g <- 2#
t.counter <- seed.day+1                                     #dummy variable to compare with variable duration#
                                                            #t=0 is the first, not the zero, row on the matrix#
#Within each generation of infection#
if (t.counter < duration) {#
    while (t.counter < duration) {#
        case.day <- sort(rpois(R0,1))                       #getting generation time between this generation and the next#
#        print('case.day:'); print(case.day)#
        for (i in 1:R0) #
        {#
            if (i==1) #
                {day.diff[i] <- case.day[i]}#
            else #
                {day.diff[i] <- case.day[i] - case.day[i-1]}#
        }#
        for (i in 1:R0) #
        {   t.counter <- t.counter + day.diff[i]#
            if (t.counter <= duration)                       #in case t.counter goes beyond duration in the last round of infection#
                {case.num[t.counter] <- case.num[t.counter] + 1} #case number increases by 1 at t=t.counter#
        }#
    g <- g + 1                                              #
    }#
}#
#
#
##
#Output#
##
#We have (g-1) generations of infection in the given duration#
print('Generations of infection:'); print(g-1)#
#
#Storing data into a matrix named data.table#
data.table <- matrix(1:duration, ncol=3, nrow=duration)     #1st column is the time step#
data.table[,2] <- t(seed.num)                               #2nd column is the case number of seed#
data.table[,3] <- t(case.num)                               #3rd column is the number of infected cases#
print('data.table:'); print(data.table)#
#
#Stacked bar plot#
xlabel="Time (days)"#
ylabel="Number of cases"#
title="Case Curve"#
barplot(t(data.table[1:duration,2:3]), beside = FALSE,      #stacked bar plot with colors and legend#
      main=title, xlab=xlabel, ylab=ylabel, col=c("darkblue", "grey"), legend = c("Seed", "Cases"))#
#
#End of script
